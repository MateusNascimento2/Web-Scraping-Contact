# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUIPrecsys.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from openpyxl import load_workbook
import pandas as pd
from openpyxl import load_workbook
from bs4 import BeautifulSoup
from pyparsing import col
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
import datetime

from PyQt5.QtGui import QIcon
from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
from PyQt5.QtWidgets import QFileDialog, QMessageBox


class Ui_MainWindow(object):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.setEnabled(True)
                MainWindow.resize(1024, 780)
                MainWindow.setMinimumSize(QtCore.QSize(1024, 720))
                MainWindow.setMaximumSize(QtCore.QSize(1024, 720))
                MainWindow.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
                MainWindow.setAcceptDrops(False)
                MainWindow.setToolTip("")
                MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
                MainWindow.setAnimated(True)
                
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
                self.verticalLayout.setContentsMargins(0, 0, 0, 0)
                self.verticalLayout.setSpacing(0)
                self.verticalLayout.setObjectName("verticalLayout")
                self.frame = QtWidgets.QFrame(self.centralwidget)
                self.frame.setMinimumSize(QtCore.QSize(1024, 780))
                self.frame.setStyleSheet("background-image: url(img/background.jpg);")
                self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame.setObjectName("frame")
                self.frame_2 = QtWidgets.QFrame(self.frame)
                self.frame_2.setEnabled(True)
                self.frame_2.setGeometry(QtCore.QRect(280, 20, 441, 41))
                self.frame_2.setMaximumSize(QtCore.QSize(601, 71))
                self.frame_2.setAutoFillBackground(False)
                self.frame_2.setStyleSheet(
                        "image: url(img/logo-3.png); background: transparent;")
                self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
                self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
                self.frame_2.setObjectName("frame_2")
                self.label = QtWidgets.QLabel(self.frame)
                self.label.setGeometry(QtCore.QRect(130, 60, 191, 61))
                font = QtGui.QFont()
                font.setFamily("Segoe UI Semibold")
                font.setPointSize(18)
                font.setBold(True)
                font.setUnderline(False)
                font.setWeight(75)
                font.setStrikeOut(False)
                font.setStyleStrategy(QtGui.QFont.PreferAntialias)
                self.label.setFont(font)
                self.label.setStyleSheet("background: transparent")
                self.label.setObjectName("label")
                self.label_3 = QtWidgets.QLabel(self.frame)
                self.label_3.setGeometry(QtCore.QRect(130, 151, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_3.setFont(font)
                self.label_3.setStyleSheet("background:transparent;\n"
                                        "color:#111;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 14px;\n"
                                        "font-weight: 800;")
                self.label_3.setObjectName("label_3")
                self.label_4 = QtWidgets.QLabel(self.frame)
                self.label_4.setGeometry(QtCore.QRect(130, 221, 47, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_4.setFont(font)
                self.label_4.setStyleSheet("background:transparent;\n"
                                        "color:#111;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 14px;\n"
                                        "font-weight: 800;")
                self.label_4.setObjectName("label_4")
                self.lineEdit = QtWidgets.QLineEdit(self.frame)
                self.lineEdit.setEnabled(True)
                self.lineEdit.setGeometry(QtCore.QRect(130, 180, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.lineEdit.setFont(font)
                self.lineEdit.setStyleSheet("background: #f5f8fa;\n"
                                        "color:#5e6278;\n"
                                        "padding:0px;\n"
                                        "min-width:200px;\n"
                                        "max-width:200px;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "border-radius : 6px;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 12px;\n"
                                        "font-weight:800;\n"
                                        "padding:0px 10px 0px 10px;")
                self.lineEdit.setText("")
                self.lineEdit.setObjectName("lineEdit")
                self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
                self.lineEdit_2.setGeometry(QtCore.QRect(130, 250, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.lineEdit_2.setFont(font)
                self.lineEdit_2.setStyleSheet("background: #f5f8fa;\n"
                                        "color:#5e6278;\n"
                                        "padding:0px;\n"
                                        "min-width:200px;\n"
                                        "max-width:200px;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "border-radius : 6px;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 12px;\n"
                                        "font-weight:800;\n"
                                        "padding:0px 10px 0px 10px;")
                self.lineEdit_2.setInputMask("")
                self.lineEdit_2.setObjectName("lineEdit_2")
                self.label_8 = QtWidgets.QLabel(self.frame)
                self.label_8.setGeometry(QtCore.QRect(130, 330, 650, 36))
                sizePolicy = QtWidgets.QSizePolicy(
                        QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(
                self.label_8.sizePolicy().hasHeightForWidth())
                self.label_8.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_8.setFont(font)
                self.label_8.setStyleSheet("background: #f5f8fa;\n"
                                        "color:#5e6278;\n"
                                        "padding:0px;\n"
                                        "min-width:630px;\n"
                                        "max-width:630px;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "border-radius : 6px;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 12px;\n"
                                        "font-weight:800;\n"
                                        "padding:0px 10px 0px 10px;")
                self.label_8.setScaledContents(False)
                self.label_8.setObjectName("label_8")
                self.pushButton_2 = QtWidgets.QPushButton(self.frame)
                self.pushButton_2.setGeometry(QtCore.QRect(130, 430, 770, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.pushButton_2.setFont(font)
                self.pushButton_2.setStyleSheet("background: #181c32;\n"
                                                "color:#FFF;\n"
                                                "padding:0px;\n"
                                                "min-width:770px;\n"
                                                "max-width:770px;\n"
                                                "min-height:auto;\n"
                                                "max-height:auto;\n"
                                                "border-radius : 6px;\n"
                                                "font-family:Calibri;\n"
                                                "font-size: 12px;\n"
                                                "font-weight:800;")
                self.pushButton_2.setObjectName("pushButton_2")
                self.pushButton_3 = QtWidgets.QPushButton(self.frame)
                self.pushButton_3.setGeometry(QtCore.QRect(800, 330, 100, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.pushButton_3.setFont(font)
                self.pushButton_3.setStyleSheet("background: #181c32;\n"
                                                "color:#FFF;\n"
                                                "padding:0px;\n"
                                                "min-width:100px;\n"
                                                "max-width:100px;\n"
                                                "min-height:auto;\n"
                                                "max-height:auto;\n"
                                                "border-radius : 6px;\n"
                                                "font-family:Calibri;\n"
                                                "font-size: 12px;\n"
                                                "font-weight:800;")
                self.pushButton_3.setObjectName("pushButton_3")
                self.label_15 = QtWidgets.QLabel(self.frame)
                self.label_15.setGeometry(QtCore.QRect(130, 120, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_15.setFont(font)
                self.label_15.setStyleSheet("background:transparent;\n"
                                        "color:#111;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 18px;\n"
                                        "font-weight: 800;")
                self.label_15.setObjectName("label_15")
                self.label_16 = QtWidgets.QLabel(self.frame)
                self.label_16.setGeometry(QtCore.QRect(400, 120, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_16.setFont(font)
                self.label_16.setStyleSheet("background:transparent;\n"
                                        "color:#111;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 18px;\n"
                                        "font-weight: 800;")
                self.label_16.setObjectName("label_16")
                self.label_9 = QtWidgets.QLabel(self.frame)
                self.label_9.setGeometry(QtCore.QRect(400, 221, 47, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_9.setFont(font)
                self.label_9.setStyleSheet("background:transparent;\n"
                                        "color:#111;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 14px;\n"
                                        "font-weight: 800;")
                self.label_9.setObjectName("label_9")
                self.lineEdit_3 = QtWidgets.QLineEdit(self.frame)
                self.lineEdit_3.setEnabled(True)
                self.lineEdit_3.setGeometry(QtCore.QRect(400, 180, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.lineEdit_3.setFont(font)
                self.lineEdit_3.setStyleSheet("background: #f5f8fa;\n"
                                        "color:#5e6278;\n"
                                        "padding:0px;\n"
                                        "min-width:200px;\n"
                                        "max-width:200px;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "border-radius : 6px;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 12px;\n"
                                        "font-weight:800;\n"
                                        "padding:0px 10px 0px 10px;")
                self.lineEdit_3.setText("")
                self.lineEdit_3.setObjectName("lineEdit_3")
                self.label_10 = QtWidgets.QLabel(self.frame)
                self.label_10.setGeometry(QtCore.QRect(400, 151, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_10.setFont(font)
                self.label_10.setStyleSheet("background:transparent;\n"
                                        "color:#111;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 14px;\n"
                                        "font-weight: 800;")
                self.label_10.setObjectName("label_10")
                self.lineEdit_4 = QtWidgets.QLineEdit(self.frame)
                self.lineEdit_4.setGeometry(QtCore.QRect(400, 250, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.lineEdit_4.setFont(font)
                self.lineEdit_4.setStyleSheet("background: #f5f8fa;\n"
                                        "color:#5e6278;\n"
                                        "padding:0px;\n"
                                        "min-width:200px;\n"
                                        "max-width:200px;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "border-radius : 6px;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 12px;\n"
                                        "font-weight:800;\n"
                                        "padding:0px 10px 0px 10px;")
                self.lineEdit_4.setInputMask("")
                self.lineEdit_4.setObjectName("lineEdit_4")
                self.label_17 = QtWidgets.QLabel(self.frame)
                self.label_17.setGeometry(QtCore.QRect(670, 120, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_17.setFont(font)
                self.label_17.setStyleSheet("background:transparent;\n"
                                    "color:#111;\n"
                                    "min-height:auto;\n"
                                    "max-height:auto;\n"
                                    "font-family:Calibri;\n"
                                    "font-size: 18px;\n"
                                    "font-weight: 800;")
                self.label_17.setObjectName("label_17")
                self.label_11 = QtWidgets.QLabel(self.frame)
                self.label_11.setGeometry(QtCore.QRect(670, 221, 47, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_11.setFont(font)
                self.label_11.setStyleSheet("background:transparent;\n"
                                    "color:#111;\n"
                                    "min-height:auto;\n"
                                    "max-height:auto;\n"
                                    "font-family:Calibri;\n"
                                    "font-size: 14px;\n"
                                    "font-weight: 800;")
                self.label_11.setObjectName("label_11")
                self.lineEdit_5 = QtWidgets.QLineEdit(self.frame)
                self.lineEdit_5.setEnabled(True)
                self.lineEdit_5.setGeometry(QtCore.QRect(670, 180, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.lineEdit_5.setFont(font)
                self.lineEdit_5.setStyleSheet("background: #f5f8fa;\n"
                                      "color:#5e6278;\n"
                                      "padding:0px;\n"
                                      "min-width:200px;\n"
                                      "max-width:200px;\n"
                                      "min-height:auto;\n"
                                      "max-height:auto;\n"
                                      "border-radius : 6px;\n"
                                      "font-family:Calibri;\n"
                                      "font-size: 12px;\n"
                                      "font-weight:800;\n"
                                      "padding:0px 10px 0px 10px;")
                self.lineEdit_5.setText("")
                self.lineEdit_5.setObjectName("lineEdit_5")
                self.label_12 = QtWidgets.QLabel(self.frame)
                self.label_12.setGeometry(QtCore.QRect(670, 151, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_12.setFont(font)
                self.label_12.setStyleSheet("background:transparent;\n"
                                    "color:#111;\n"
                                    "min-height:auto;\n"
                                    "max-height:auto;\n"
                                    "font-family:Calibri;\n"
                                    "font-size: 14px;\n"
                                    "font-weight: 800;")
                self.label_12.setObjectName("label_12")
                self.lineEdit_6 = QtWidgets.QLineEdit(self.frame)
                self.lineEdit_6.setGeometry(QtCore.QRect(670, 250, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.lineEdit_6.setFont(font)
                self.lineEdit_6.setStyleSheet("background: #f5f8fa;\n"
                                      "color:#5e6278;\n"
                                      "padding:0px;\n"
                                      "min-width:200px;\n"
                                      "max-width:200px;\n"
                                      "min-height:auto;\n"
                                      "max-height:auto;\n"
                                      "border-radius : 6px;\n"
                                      "font-family:Calibri;\n"
                                      "font-size: 12px;\n"
                                      "font-weight:800;\n"
                                      "padding:0px 10px 0px 10px;")
                self.lineEdit_6.setInputMask("")
                self.lineEdit_6.setObjectName("lineEdit_6")
                self.pushButton_4 = QtWidgets.QPushButton(self.frame)
                self.pushButton_4.setGeometry(QtCore.QRect(800, 380, 100, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.pushButton_4.setFont(font)
                self.pushButton_4.setStyleSheet("background: #181c32;\n"
                                        "color:#FFF;\n"
                                        "padding:0px;\n"
                                        "min-width:100px;\n"
                                        "max-width:100px;\n"
                                        "min-height:auto;\n"
                                        "max-height:auto;\n"
                                        "border-radius : 6px;\n"
                                        "font-family:Calibri;\n"
                                        "font-size: 12px;\n"
                                        "font-weight:800;")
                self.pushButton_4.setObjectName("pushButton_4")
                self.label_13 = QtWidgets.QLabel(self.frame)
                self.label_13.setGeometry(QtCore.QRect(130, 380, 650, 36))
                sizePolicy = QtWidgets.QSizePolicy(
                        QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(
                self.label_13.sizePolicy().hasHeightForWidth())
                self.label_13.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_13.setFont(font)
                self.label_13.setStyleSheet("background: #f5f8fa;\n"
                                    "color:#5e6278;\n"
                                    "padding:0px;\n"
                                    "min-width:630px;\n"
                                    "max-width:630px;\n"
                                    "min-height:auto;\n"
                                    "max-height:auto;\n"
                                    "border-radius : 6px;\n"
                                    "font-family:Calibri;\n"
                                    "font-size: 12px;\n"
                                    "font-weight:800;\n"
                                    "padding:0px 10px 0px 10px;")
                self.label_13.setScaledContents(False)
                self.label_13.setObjectName("label_13")
                self.label_18 = QtWidgets.QLabel(self.frame)
                self.label_18.setGeometry(QtCore.QRect(135, 540, 220, 37))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_18.setFont(font)
                self.label_18.setStyleSheet("background:transparent;\n"
                                    "color:#111;\n"
                                    "min-height:auto;\n"
                                    "max-height:auto;\n"
                                    "font-family:Calibri;\n"
                                    "font-size: 18px;\n"
                                    "font-weight: 800;\n"
                                    "border-bottom:1px solid #111;\n"
                                    "")
                self.label_18.setObjectName("label_18")
                self.label_19 = QtWidgets.QLabel(self.frame)
                self.label_19.setGeometry(QtCore.QRect(135, 580, 220, 36))
                font = QtGui.QFont()
                font.setFamily("Calibri")
                font.setPointSize(1)
                font.setBold(True)
                font.setWeight(99)
                self.label_19.setFont(font)
                self.label_19.setStyleSheet("background:transparent;\n"
                                    "color:#111;\n"
                                    "min-height:auto;\n"
                                    "max-height:auto;\n"
                                    "font-family:Calibri;\n"
                                    "font-size: 18px;\n"
                                    "font-weight: 800;\n"
                                    "")
                self.label_19.setObjectName("label_19")
                self.progressBar = QtWidgets.QProgressBar(self.frame)
                self.progressBar.setGeometry(QtCore.QRect(0, 700, 1031, 23))
                self.progressBar.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
                self.progressBar.setAutoFillBackground(False)
                self.progressBar.setProperty("value", 0)
                self.progressBar.setTextVisible(False)
                self.progressBar.setObjectName("progressBar")
                self.verticalLayout.addWidget(self.frame)
                MainWindow.setCentralWidget(self.centralwidget)

                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                
                MainWindow.setWindowTitle(_translate("MainWindow", "Precsys | Scrap"))
                self.label.setText(_translate("MainWindow", "Credencias"))
                self.label_3.setText(_translate("MainWindow", "Email"))
                self.label_4.setText(_translate("MainWindow", "Senha"))
                self.lineEdit_2.setText(_translate("MainWindow", ""))
                self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
                self.label_8.setText(_translate("MainWindow", "Arquivo:"))
                self.pushButton_2.setText(_translate("MainWindow", "Entrar"))
                self.pushButton_3.setText(_translate("MainWindow", "Carregar Arquivo"))
                self.label_15.setText(_translate("MainWindow", "Lemit"))
                self.label_16.setText(_translate("MainWindow", "Assertiva"))
                self.label_9.setText(_translate("MainWindow", "Senha"))
                self.label_10.setText(_translate("MainWindow", "Email"))
                self.lineEdit_4.setText(_translate("MainWindow", ""))
                self.lineEdit_4.setEchoMode(QtWidgets.QLineEdit.Password)
                self.label_17.setText(_translate("MainWindow", "ConfirmOnline"))
                self.label_11.setText(_translate("MainWindow", "Senha"))
                self.label_12.setText(_translate("MainWindow", "Email"))
                self.lineEdit_6.setText(_translate("MainWindow", ""))
                self.lineEdit_6.setEchoMode(QtWidgets.QLineEdit.Password)
                self.pushButton_4.setText(_translate("MainWindow", "Local de Saída"))
                self.label_13.setText(_translate("MainWindow", "Arquivo:"))
                self.label_18.setText(_translate("MainWindow", "1"))
                self.label_19.setText(_translate("MainWindow", "9999"))
                self.pushButton_3.clicked.connect(self.open_dialog_box)
                self.pushButton_4.clicked.connect(self.save)
                self.pushButton_2.clicked.connect(self.Load_excel_data)
                
                

        def open_dialog_box(self):
                global file_path
                
                filename = QFileDialog.getOpenFileName(None, "Open File", "", "xlsx Files(*.xlsx)")
                file_path = filename[0]
                self.label_8.setText("Arquivo: " + file_path)
                print(file_path)
                
        

        def save(self):
                global save_spot
                save_spot = QFileDialog.getSaveFileName(None, "Save File", "", "xlsx Files(*.xlsx)")
                save_spot = save_spot[0]
                self.label_13.setText("Arquivo: " + save_spot)
                
            
            

        def Load_excel_data(self):
                try:
                        login = self.lineEdit.text()
                        senha = self.lineEdit_2.text()
                        excel_filename = r"{}".format(file_path)
                        data_excel = pd.read_excel(excel_filename, usecols=['Unnamed: 4', "Unnamed: 6"], skiprows=2).dropna()
                        data_excel.drop(data_excel[data_excel["Unnamed: 6"] == "Escritório"].index, inplace=True)
                        data_excel.drop(data_excel[data_excel["Unnamed: 6"] == "Escritorio"].index, inplace=True)
                        data_excel.drop(data_excel[data_excel["Unnamed: 6"] == "Empresa"].index, inplace=True)
                        data_excel.drop(data_excel[data_excel['Unnamed: 4'] == "CANCELADO"].index, inplace=True)
                        data_excel.astype({"Unnamed: 4": float})
                        df = data_excel.apply(lambda row: row[data_excel["Unnamed: 4"] >= 50000])

                        cpfs = df["Unnamed: 6"].tolist()
                        cpfs = list(dict.fromkeys(cpfs))
                        for cpf in cpfs:
                                if cpf == "Empresa":
                                        cpfs.remove(cpf)
                                if cpf == "Escritorio":
                                        cpfs.remove(cpf)
                                if cpf == "Escritório":
                                        cpfs.remove(cpf)

                        df["Unnamed: 6"] = df["Unnamed: 6"].astype('str').str.replace(".", "")
                        df["Unnamed: 6"] = df["Unnamed: 6"].astype('str').str.replace("-", "")
                        index_row = df["Unnamed: 6"].index.tolist()

                        new_index_row = [x+4 for x in index_row]
                        new_index_row_str = [str(x) for x in new_index_row]

                        cpf_list = df["Unnamed: 6"].tolist()

                        for cpf in cpf_list:
                                if cpf == "Empresa":
                                        cpf_list.remove(cpf)
                                if cpf == "Escritorio":
                                        cpf_list.remove(cpf)
                                if cpf == "Escritório":
                                        cpf_list.remove(cpf)
                                if cpf == "CANCELADO":
                                        cpf_list.remove(cpf)
                        print(len(cpf_list))
                        print(len(new_index_row_str))

                        url = "https://lemitti.com/auth/login"

                        chrome_options = Options()
                        chrome_options.add_argument("--headless")
                        driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))
                
                

                        driver.get(url)

                        driver.implicitly_wait(5)
                        try:
                                driver.find_element("name", "email").send_keys(login)
                                driver.find_element("name", "password").send_keys(senha)
                                driver.find_element("xpath", "/html/body/fieldset/div/div/div/form/div/div/div[4]/button").click()
                                driver.find_element("xpath", "/html/body/fieldset/nav/div/div[2]/ul/li[3]/a").click()
                                driver.find_element("xpath", "/html/body/fieldset/nav/div/div[2]/ul/li[3]/ul/li[1]/a").click()
                        except:
                                msg = QMessageBox()
                                msg.setIcon(QMessageBox.Warning)
                                msg.setText("Email ou Senha incorretos")
                                msg.exec_()
                                return None
                
                        planilha = load_workbook(file_path)
                        aba_ativa = planilha.active
                
                        contador = 0
                        contador_barra = 0
                        for (cpf, value) in zip(cpf_list, new_index_row_str):
                                self.progressBar.setMaximum(len(cpf_list))
                                contador_barra += 1
                                contador += 1
                                self.label_18.setText(str(contador))
                                self.label_19.setText(str(len(cpf_list)))
                                self.progressBar.setValue(contador_barra)
                                print(value, cpf)
                                try:
                                        print(len(cpf_list))
                                        driver.get("https://lemitti.com/queries/cpf/" + cpf)
                                        
                                        QtTest.QTest.qWait(10000)
                                        
                                        driver.find_element("xpath", "/html/body/fieldset/div[2]/div[4]/div/div/div/form/div/div/span/button").click()
                                        element_nome = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[3]/div[2]/div[1]/table")
                                        element_celular = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[6]/div[2]/div/table")
                                        element_fixo = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[7]/div[2]/div/table")

                                        html_content_nome = element_nome.get_attribute('outerHTML')
                                        html_content_celular = element_celular.get_attribute('outerHTML')
                                        html_content_fixo = element_fixo.get_attribute('outerHTML')
                                        soup_nome = BeautifulSoup(html_content_nome, 'html.parser')
                                        soup_celular = BeautifulSoup(html_content_celular, 'html.parser')
                                        soup_fixo = BeautifulSoup(html_content_fixo, 'html.parser')
                                        table1 = soup_nome.find(name='table')
                                        table = soup_celular.find(name='table')
                                        table2 = soup_fixo.find(name='table')
                                        # print(table)
                                        # print(table2)
                                        df_full1 = pd.read_html(str(table1))[0]
                                        df_full = pd.read_html(str(table))[0]
                                        df_full2 = pd.read_html(str(table2))[0]
                                        nome = df_full1[1][0]

                                        lista_numero_celular = df_full["Número"].values.tolist()
                                        lista_numero_fixo = df_full2["Número"].values.tolist()
                                        new_lista_numero_celular = []
                                        for n in lista_numero_celular:
                                                new_lista_numero_celular.append(n)
                                                new_lista_numero_fixo = []
                                        for n1 in lista_numero_fixo:
                                                new_lista_numero_fixo.append(n1)
                                        lista_numero = [*new_lista_numero_celular, *new_lista_numero_fixo]
                                        print(nome)
                                        # print(new_lista_numero_celular)
                                        # print(new_lista_numero_fixo)
                                        print(lista_numero)

                                        link_table = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[4]/div[2]/div/table")
                                        html_content = link_table.get_attribute('outerHTML')
                                        soup = BeautifulSoup(html_content, 'html.parser')
                                        cpf_table = soup.find(name='table')
                                        df_full3 = pd.read_html(str(cpf_table))[0]
                                        nome_vinculo_list = df_full3["Nome"].values.tolist()
                                        tipo_vinculo_list = df_full3["Tipo de vínculo"].values.tolist()
                                        new_lista_vinculo = []
                                        i = 0
                                        for value1 in nome_vinculo_list:
                                                while i < len(tipo_vinculo_list):
                                                        new_lista_vinculo.append(value1 + ' (' + tipo_vinculo_list[i] + ')')
                                                        i += 1
                                                        break
                                        print(new_lista_vinculo)
                                        df_full3["CPF"] = df_full3["CPF"].astype('str').str.replace('.', "", regex=True)
                                        df_full3["CPF"] = df_full3["CPF"].astype('str').str.replace('-', "", regex=True)
                                        cpf_vinculo_list = df_full3['CPF'].values.tolist()
                                        for v in cpf_vinculo_list:
                                                if v == "nenhum vínculo encontrado":
                                                        cpf_vinculo_list.remove(v)
                                        # print(len(cpf_vinculo_list))

                                        #new_lista_numero_celular2 = []
                                        #new_lista_numero_fixo2 = []
                                        lista_numero2 = []

                                        if len(cpf_vinculo_list) == 0:
                                                lista_numero2 = []
                                                lista_numero2.append("nenhum telefone encontrado")
                                                print(lista_numero2)

                                        if len(cpf_vinculo_list) <= 3:
                                                v = 0
                                                for x in cpf_vinculo_list:
                                                        driver.get("https://lemitti.com/queries/cpf/" + x)
                                                        QtTest.QTest.qWait(10000)
                                                
                                                        try:
                                                                driver.find_element("xpath", "/html/body/fieldset/div[2]/div[4]/div/div/div/form/div/div/span/button").click()
                                                                element_nome2 = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[3]/div[2]/div[1]/table")
                                                                element_celular2 = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[6]/div[2]/div/table")

                                                                element_fixo2 = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[7]/div[2]/div/table")
                                                                html_content_nome2 = element_nome2.get_attribute('outerHTML')

                                                                html_content_celular2 = element_celular2.get_attribute('outerHTML')
                                                                html_content_fixo2 = element_fixo2.get_attribute('outerHTML')
                                                                soup_nome2 = BeautifulSoup( html_content_nome2, 'html.parser')
                                                                soup_celular2 = BeautifulSoup(html_content_celular2, 'html.parser')
                                                                soup_fixo2 = BeautifulSoup(html_content_fixo2, 'html.parser')
                                                                table3 = soup_celular2.find(name='table')
                                                                table4 = soup_fixo2.find(name='table')
                                                                table5 = soup_nome2.find(name='table')

                                                                df_full4 = pd.read_html(str(table3))[0]
                                                                df_full5 = pd.read_html(str(table4))[0]
                                                                df_full6 = pd.read_html(str(table5))[0]
                                                                nome2 = df_full6[1][0]
                                                                nome2_vinculo = nome2 + " (" + tipo_vinculo_list[v] + ")"
                                                                
                                                                lista_numero_celular2 = df_full4["Número"].values.tolist()
                                                                lista_numero_fixo2 = df_full5["Número"].values.tolist()

                                                                lista_numero2.append(nome2_vinculo)
                                                                for n in lista_numero_celular2:
                                                                        lista_numero2.append(n)
                                                                for n2 in lista_numero_fixo2:
                                                                        lista_numero2.append(n2)
                                                                # print(new_lista_numero_celular2)
                                                                # print(new_lista_numero_fixo2)
                                                                #lista_numero2 = [*new_lista_numero_celular2, *new_lista_numero_fixo2]
                                                                v += 1
                                                                print(lista_numero2)
                                                        except:
                                                                if len(lista_numero2) == 0:
                                                                        lista_numero2 = []
                                                                        lista_numero2.append("cpf do vínculo não encontrado")
                                                                        v += 1
                                                                else:
                                                                        lista_numero2.append("cpf do vínculo não encontrado")
                                                                        v += 1
                                                        continue

                                        if len(cpf_vinculo_list) > 3:
                                                i = 0
                                                v = 0
                                                while i <= 2:
                                                        driver.get("https://lemitti.com/queries/cpf/" + cpf_vinculo_list[i])
                                                        QtTest.QTest.qWait(10000)
                                                
                                                        try:
                                                                driver.find_element("xpath", "/html/body/fieldset/div[2]/div[4]/div/div/div/form/div/div/span/button").click()
                                                                element_nome2 = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[3]/div[2]/div[1]/table")
                                                                element_celular2 = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[6]/div[2]/div/table")
                                                                element_fixo2 = driver.find_element("xpath", "/html/body/fieldset/div[2]/div[3]/div/div[7]/div[2]/div/table")
                                                                html_content_nome2 = element_nome2.get_attribute('outerHTML')
                                                                html_content_celular2 = element_celular2.get_attribute('outerHTML')
                                                                html_content_fixo2 = element_fixo2.get_attribute('outerHTML')
                                                                soup_nome2 = BeautifulSoup(html_content_nome2, 'html.parser')
                                                                soup_celular2 = BeautifulSoup(html_content_celular2, 'html.parser')
                                                                soup_fixo2 = BeautifulSoup(html_content_fixo2, 'html.parser')
                                                                table3 = soup_celular2.find(name='table')
                                                                table4 = soup_fixo2.find(name='table')
                                                                table5 = soup_nome2.find(name='table')

                                                                df_full4 = pd.read_html(str(table3))[0]
                                                                df_full5 = pd.read_html(str(table4))[0]
                                                                df_full6 = pd.read_html(str(table5))[0]
                                                                nome2 = df_full6[1][0]
                                                                nome2_vinculo = nome2 + " (" + tipo_vinculo_list[v] + ")"

                                                                lista_numero_celular2 = df_full4["Número"].values.tolist()
                                                                lista_numero_fixo2 = df_full5["Número"].values.tolist()
                                                                print(lista_numero_celular2)

                                                                lista_numero2.append(nome2_vinculo)
                                                                for n in lista_numero_celular2:
                                                                        lista_numero2.append(n)
                                                                for n2 in lista_numero_fixo2:
                                                                        lista_numero2.append(n2)

                                                                # print(new_lista_numero_celular2)
                                                                # print(new_lista_numero_fixo2)
                                                                #lista_numero2 = [*new_lista_numero_celular2, *new_lista_numero_fixo2]
                                                                print(lista_numero2)
                                                                v += 1
                                                                i += 1
                                                        except:
                                                                if len(lista_numero2) == 0:
                                                                        lista_numero2.append("cpf do vínculo não encontrado")
                                                                        i += 1
                                                                        v += 1
                                                                else:
                                                                        lista_numero2.append("cpf do vínculo não encontrado")
                                                                        i += 1
                                                                        v += 1
                                                        continue

                                        if len(new_lista_vinculo) >= 4:
                                                today = datetime.datetime.now().strftime('%d-%m-%Y')
                                                lista_numero_all = [*lista_numero, lista_numero2]
                                                lista_numero_all = [nome] + lista_numero_all + [f"Atualizado em: {today}"]
                                                print(lista_numero_all)

                                                aba_ativa["H" + value] = repr(lista_numero_all)

                                        if len(new_lista_vinculo) == 3:
                                                new_lista_vinculo3 = new_lista_vinculo[0:3]
                                                # print(new_lista_vinculo3)
                                                # print(new_lista_vinculo3[0])
                                                today = datetime.datetime.now().strftime('%d-%m-%Y')
                                                lista_numero_all = [*lista_numero, lista_numero2]
                                                lista_numero_all = [nome] + lista_numero_all + [f"Atualizado em: {today}"]
                                                print(lista_numero_all)

                                                aba_ativa["H" + value] = repr(lista_numero_all)

                                        if len(new_lista_vinculo) == 2:
                                                new_lista_vinculo3 = new_lista_vinculo[0:2]
                                                # print(new_lista_vinculo3)
                                                # print(new_lista_vinculo3[0])
                                                today = datetime.datetime.now().strftime('%d-%m-%Y')
                                                lista_numero_all = [*lista_numero, lista_numero2]
                                                lista_numero_all = [nome] + lista_numero_all + [f"Atualizado em: {today} "]
                                                print(lista_numero_all)

                                                aba_ativa["H" + value] = repr(lista_numero_all)

                                        if len(new_lista_vinculo) == 1:
                                                new_lista_vinculo3 = new_lista_vinculo[0:1]
                                                # print(new_lista_vinculo3)
                                                # print(new_lista_vinculo3[0])
                                                today = datetime.datetime.now().strftime('%d-%m-%Y')
                                                lista_numero_all = [*lista_numero, lista_numero2]
                                                lista_numero_all = [nome] + lista_numero_all + [f"Atualizado em: {today} "]
                                                print(lista_numero_all)

                                                aba_ativa["H" + value] = repr(lista_numero_all)

                                except:
                                        print("cpf nao encontrado")
                                        today = datetime.datetime.now().strftime('%d-%m-%Y')
                                        aba_ativa["H" + value] = "cpf não encontrado. " + f"Atualizado em: {today}"
                                continue
                        
                        planilha.save(save_spot)
                        driver.quit()
                        msg2 = QMessageBox()
                        msg2.setIcon(QMessageBox.Information)
                        msg2.setText("Operação concluída com sucesso!")
                        msg2.exec_()
                        
                        
                except:
                        msg3 = QMessageBox()
                        msg3.setIcon(QMessageBox.Warning)
                        msg3.setText("Arquivo Invalído!")
                        msg3.exec_()
                        return None
                        
        
        
                        
                



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    app.setWindowIcon(QIcon("img/icone-logo.png"))
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
